import pybullet as p
import math
import numpy as np
import pybullet_data
import time
import bezier
import abc
import serial

import random

# roslaunch urdf_tutorial display.launch model:='D:\Programming\Python\Hexapod-GA-Gait\robot.urdf'
# roslaunch urdf_tutorial display.launch model:='D:\Programming\Python\Hexapod-GA-Gait\crab_description\models\crab_model.urdf'


class Gait:

    def __init__(self, chromosome):
        self.duration = chromosome[0]
        self.motion_chromosome = chromosome[3:]
        self.legSequences = []
        for j in range(6):
            motions = self.motion_chromosome[j * SIZE_OF_MOTION_CHROMOSOME * MAX_MOTIONS_IN_SEQUENCE: (j + 1) * SIZE_OF_MOTION_CHROMOSOME * MAX_MOTIONS_IN_SEQUENCE]
            ls = LegSequence(chromosome[0], j, motions)
            self.legSequences.append(ls)

    def evaluate(self, elapsed_time):
        leg_positions = []
        for ls in self.legSequences:
            leg_positions.append(ls.evaluate((elapsed_time % self.duration) / self.duration))
        return leg_positions


class LegSequence:
    def __init__(self, duration, legID, motion_chromosome):
        self.duration = duration
        self.legID = legID
        # self.motions = self.manualInitMotions(legID)
        self.motions = self.readChromosome(motion_chromosome)
        self.motions.sort(key=lambda x: x[0])
        self.addNoMotionConsts()

    def readChromosome(self, chromosome):
        motions = []
        for ii in range(MAX_MOTIONS_IN_SEQUENCE):
            local_index = ii * SIZE_OF_MOTION_CHROMOSOME
            motion_type = round(chromosome[0 + local_index])
            start_time = chromosome[1 + local_index]
            if motion_type == 0:
                continue
            elif motion_type == 1:  # line motions
                motions.append((start_time, LineMotion([chromosome[6 + local_index], chromosome[7 + local_index], chromosome[8 + local_index]],
                                                       [chromosome[15 + local_index], chromosome[16 + local_index], chromosome[17 + local_index]],
                                                       np.array([[0.0, chromosome[2 + local_index], chromosome[4 + local_index], 1.0],
                                                                 [0.0, chromosome[3 + local_index], chromosome[5 + local_index], 1.0]]))))
            elif motion_type == 2:  # curve motions
                motions.append((start_time,
                                BezierMotion(np.array([[chromosome[6 + local_index], chromosome[9 + local_index], chromosome[12 + local_index], chromosome[15 + local_index]],
                                                       [chromosome[7 + local_index], chromosome[10 + local_index], chromosome[13 + local_index], chromosome[16 + local_index]],
                                                       [chromosome[8 + local_index], chromosome[11 + local_index], chromosome[14 + local_index], chromosome[17 + local_index]]]),
                                             np.array([[0.0, chromosome[2 + local_index], chromosome[4 + local_index], 1.0], [0.0, chromosome[3 + local_index], chromosome[5 + local_index], 1.0]]))))
            elif motion_type == 4:
                motions.append((start_time, NoMotion()))
        return motions

    def manualInitMotions(self, legID):
        startPos = [0.0, -0.5, 0.0]
        knot1 = [0.0, 0.0, 0.6]
        knot2 = [0.0, 0.5, 0.6]
        endPos = [0.0, 0.5, 0.0]
        motions = []
        if legID % 2:
            motions.append((0.0, BezierMotion(np.array([[startPos[0], knot1[0], knot2[0], endPos[0]], [startPos[1], knot1[1], knot2[1], endPos[1]], [startPos[2], knot1[2], knot2[2], endPos[2]]]))))
            motions.append((0.5, LineMotion(endPos, startPos)))
        else:
            motions.append((0.0, LineMotion(endPos, startPos)))
            motions.append((0.5, BezierMotion(np.array([[startPos[0], knot1[0], knot2[0], endPos[0]], [startPos[1], knot1[1], knot2[1], endPos[1]], [startPos[2], knot1[2], knot2[2], endPos[2]]]))))
        return motions

    def addNoMotionConsts(self):
        if len(self.motions) > 1:
            for j in range(len(self.motions)):
                if type(self.motions[j][1]) is NoMotion:
                    self.motions[j][1].setEvaluationConst(self.motions[(j - 1) % (len(self.motions))][1].evaluate(1.0))

    def getPositionInMotion(self, progress, motions):
        # for-loop to loop around every motion to return motion for a given amount of progress
        for j in range(len(motions) - 1, -1, -1):
            # print(f'j: {j}')
            motion_start_time = motions[j][0]
            end_time = motions[(j + 1) % (len(motions))][0]
            loop_back = (motion_start_time >= end_time)
            if progress < end_time and loop_back:
                progress += 1
            end_time += loop_back  # end of cycle motion loop back around
            if motion_start_time <= progress < end_time:
                # Convert global progress into local-progress of given motion
                local_progress = (progress - motion_start_time) / (end_time - motion_start_time)
                return motions[j][1].evaluate(local_progress)

        return [0.0, 0.0, 0.0]

    def evaluate(self, progress):
        return self.getPositionInMotion(progress, self.motions)


class Motion(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def evaluate(self, progress):
        pass


class BezierMotion(Motion):
    def __init__(self, knots, velocity_knots):
        self.knots = knots
        self.curve = bezier.Curve(self.knots, degree=3)
        self.velocity_curve = bezier.Curve(velocity_knots, degree=3)
        # plotCurve(self.velocity_curve)

    def evaluate(self, progress):
        # velocity curve: y=a+\frac{b}{\left(sx+1\right)^{7}}
        # progress = 1 + -(1 / math.pow((progress + 1), 7))
        curved_progress = self.velocity_curve.evaluate(progress)
        raw_position = self.curve.evaluate(curved_progress[1][0] % 1)
        position = flatten(raw_position)
        return position


class LineMotion(Motion):
    def __init__(self, startPoint, endPoint, velocity_knots):
        self.startPoint = startPoint
        self.endPoint = endPoint
        self.velocity_curve = bezier.Curve(velocity_knots, degree=3)
        # plotCurve(self.velocity_curve)

    # Parametric equation of a straight line given a progression percentage
    def evaluate(self, progress):
        # velocity curve: y=a+\frac{b}{\left(sx+1\right)^{7}}
        # progress = 1 + -(1 / math.pow((progress + 1), 7))

        curved_progress = self.velocity_curve.evaluate(progress % 1)
        x = self.startPoint[0] + (self.endPoint[0] - self.startPoint[0]) * curved_progress[1][0]
        y = self.startPoint[1] + (self.endPoint[1] - self.startPoint[1]) * curved_progress[1][0]
        z = self.startPoint[2] + (self.endPoint[2] - self.startPoint[2]) * curved_progress[1][0]
        return [x, y, z]


class NoMotion(Motion):
    def __init__(self, *args):
        self.evaluationConst = [0.0, 0.0, 0.0]
        if len(args) == 1:
            self.evaluationConst = args[0]

    def setEvaluationConst(self, c):
        self.evaluationConst = c

    def evaluate(self, progress):
        return self.evaluationConst


def radToPwm(angle):
    return ((2000 * angle) / math.pi) + 1500


# t in ms; the closer t is to 0, more accuracy but less smooth motion
def updateRealServos(ser, t):
    # right legs
    ser.write(
        f'#0P{radToPwm(-p.getJointState(hexapod_ID, 8)[0])}T{t}#1P{radToPwm(p.getJointState(hexapod_ID, 9)[0])}T{t}#2P{radToPwm(-p.getJointState(hexapod_ID, 10)[0])}T{t}\r'.encode(
            'utf-8'))
    ser.write(
        f'#4P{radToPwm(-p.getJointState(hexapod_ID, 4)[0])}T{t}#5P{radToPwm(p.getJointState(hexapod_ID, 5)[0])}T{t}#6P{radToPwm(-p.getJointState(hexapod_ID, 6)[0])}T{t}\r'.encode(
            'utf-8'))
    ser.write(
        f'#8P{radToPwm(-p.getJointState(hexapod_ID, 0)[0])}T{t}#9P{radToPwm(p.getJointState(hexapod_ID, 1)[0])}T{t}#10P{radToPwm(-p.getJointState(hexapod_ID, 2)[0])}T{t}\r'.encode(
            'utf-8'))

    # left legs
    ser.write(
        f'#24P{radToPwm(-p.getJointState(hexapod_ID, 12)[0])}T{t}#25P{radToPwm(p.getJointState(hexapod_ID, 13)[0])}T{t}#26P{radToPwm(-p.getJointState(hexapod_ID, 14)[0])}T{t}\r'.encode(
            'utf-8'))
    ser.write(
        f'#20P{radToPwm(-p.getJointState(hexapod_ID, 16)[0])}T{t}#21P{radToPwm(p.getJointState(hexapod_ID, 17)[0])}T{t}#22P{radToPwm(-p.getJointState(hexapod_ID, 18)[0])}T{t}\r'.encode(
            'utf-8'))
    ser.write(
        f'#16P{radToPwm(-p.getJointState(hexapod_ID, 20)[0])}T{t}#17P{radToPwm(p.getJointState(hexapod_ID, 21)[0])}T{t}#18P{radToPwm(-p.getJointState(hexapod_ID, 22)[0])}T{t}\r'.encode(
            'utf-8'))


def calculateIK3(feet_positions, jointDamping):
    pos_body = np.array(p.getBasePositionAndOrientation(hexapod_ID)[0])
    orn_body = p.getBasePositionAndOrientation(hexapod_ID)[1]

    rest_poses = []
    local_target_pos = []
    translated_pos = []
    target_pos = []

    for j in range(6):
        rest_poses.append(pos_body + p.multiplyTransforms([0, 0, 0], orn_body, baseToEndEffectorConstVec[j], [0, 0, 0, 1])[0])
        local_target_pos.append(feet_positions[j])
        translated_pos.append(p.multiplyTransforms(rest_poses[j], orn_body, local_target_pos[j], [0, 0, 0, 1]))
        target_pos.append(translated_pos[j][0])

    ik = p.calculateInverseKinematics2(
        hexapod_ID,
        ([x for x in range(3, 24, 4)]),
        target_pos,
        solver=p.IK_DLS,
        lowerLimits=ll,
        upperLimits=ul,
        jointRanges=jr,
        restPoses=rest_poses,
        jointDamping=([jointDamping] * 18)
    )
    return ik


def setServoStatesManual():
    p.setJointMotorControlArray(
        hexapod_ID,
        JOINT_INDICES,
        p.POSITION_CONTROL)
    # targetPositions=read_debug_parameters())


def setServoStatesLegs(feet_positions, force, jointDamping):
    p.setJointMotorControlArray(
        hexapod_ID,
        JOINT_INDICES,
        p.POSITION_CONTROL,
        targetPositions=calculateIK3(feet_positions, jointDamping),
        forces=([force] * 18)
    )


def plotCurve(bezier_curve):
    bezier_curve.plot(num_pts=256)


def flatten(t):
    return [item for sublist in t for item in sublist]


def manualChromosomeCreation():
    duration = 2
    force = 150
    jointDamping = 0
    chromosome = [duration, force, jointDamping]
    bezierMotion = [2, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5, 0.0, 0.0, 0.0, 0.6, 0.0, 0.5, 0.6, 0.0, 0.5, 0.0]
    lineMotion = [1, 0.5, 1.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, 0.0]
    for leg_id in range(NUM_OF_LEGS):
        if leg_id % 2 == 0:
            bezierMotion[1] = 0.0
            lineMotion[1] = 0.5
        else:
            bezierMotion[1] = 0.5
            lineMotion[1] = 0.0
        chromosome.extend(bezierMotion)
        chromosome.extend(lineMotion)
        for motion_id in range(MAX_MOTIONS_IN_SEQUENCE - 2):
            chromosome.extend([0] * SIZE_OF_MOTION_CHROMOSOME)
    return chromosome


def gaitScore(bodyID):
    current_position = p.getBasePositionAndOrientation(bodyID)[0]
    distance = distanceFromOrigin(bodyID)
    angle = angleBetweenVectors(np.array([0, 1]), np.array([current_position[0], current_position[1]]))
    return distance, abs(angle)


def distanceFromOrigin(bodyID):
    return p.getBasePositionAndOrientation(bodyID)[0][1]


def angleBetweenVectors(a, b):
    unit_vector_1 = a / np.linalg.norm(a)
    unit_vector_2 = b / np.linalg.norm(b)
    dot_product = np.dot(unit_vector_1, unit_vector_2)
    angle = np.arccos(dot_product)
    return angle


def evaluateGait(individual):
    lastTime = time.time()
    while True:
        dt = 0
        gait = Gait(individual)
        resetEnvironment()
        for ii in range(3000):
            setServoStatesLegs(gait.evaluate(dt), individual[1], 0)
            p.stepSimulation()
            dt += 1. / 240.
        gaitEvaluation = gaitScore(hexapod_ID)
        print(f'Time Elapsed: {time.time() - lastTime} seconds')
        print(f'Evaluation: {gaitEvaluation}')
        print(f'Chromosome: {individual}')
        if not math.isnan(gaitEvaluation[0]):
            break
        else:
            resetPyBulletSimulation()
    return gaitEvaluation


def runGait(individual):
    lastTime = time.time()
    gait = Gait(individual)
    resetEnvironment()
    p.setRealTimeSimulation(1)
    for ii in range(100000):
        setServoStatesLegs(gait.evaluate(time.time() - programStartTime), individual[1], 0)
    gaitEvaluation = gaitScore(hexapod_ID)
    print(f'Time Elapsed: {time.time() - lastTime} seconds')
    print(f'Evaluation: {gaitScore(hexapod_ID)}')
    print(f'Chromosome: {individual}')
    return gaitEvaluation


def evaluateTest(individual):
    return 1, 1


def resetLegJoints():
    p.resetJointStatesMultiDof(hexapod_ID, JOINT_INDICES, [[0]] * 18, targetVelocities=[[0]] * 18)
    p.setJointMotorControlArray(hexapod_ID, JOINT_INDICES, p.POSITION_CONTROL, targetPositions=([0] * 18), forces=([150] * 18))


def resetEnvironment():
    resetLegJoints()
    p.resetBasePositionAndOrientation(hexapod_ID, [0, 0, 1.375 + random.uniform(0, 0.002)], [0, 0, 0, 1])
    p.stepSimulation()


def resetPyBulletSimulation():
    global plane_ID
    global hexapod_ID
    p.resetSimulation()
    p.setGravity(0, 0, -9.8)
    plane_ID = p.loadURDF("plane.urdf")
    hexapod_ID = p.loadURDF("robot2.urdf", [0, 0, 1.375], [0, 0, 0, 1])


# start of main program
MAX_MOTIONS_IN_SEQUENCE = 4
NUM_OF_LEGS = 6
SIZE_OF_MOTION_CHROMOSOME = 18

# PyBullet Init
physicsClient = p.connect(p.GUI)
p.setAdditionalSearchPath(pybullet_data.getDataPath())
plane_ID = None
hexapod_ID = None
resetPyBulletSimulation()
programStartTime = time.time()

# Inverse Kinematics Setup
servoRangeOfMotion = math.pi * 3 / 4
ll = ([-servoRangeOfMotion] * 3) + ([0] * 15)
ul = ([servoRangeOfMotion] * 3) + ([0] * 15)
jr = ([servoRangeOfMotion] * 3) + ([0] * 15)
jd = ([0] * 18)

JOINT_INDICES = [x for x in range(0, 24) if (x + 1) % 4 != 0]

baseToEndEffectorConstVec = []
for i in range(3, 24, 4):
    baseToEndEffectorConstVec.append(np.array(p.getLinkState(hexapod_ID, i)[4]) - np.array(p.getBasePositionAndOrientation(hexapod_ID)[0]))


# PySerial init
# ssc32 = serial.Serial('COM5', 115200, timeout=5)  # open serial port

def main():
    print("cheese!")
    # evaluateGait(manualChromosomeCreation())
    # runGait(manualChromosomeCreation())
    # evaluateGait([0.18913739859461356, 245.76395081686002, 0.17892491628438786, 3.18374003551514, 0.808366728912364, 0.03958526452613142, 0.42318206278409015, 0.7311598007949505, 0.6166438335549862, 0.32402160814594994, 0.13335847770199669, 0.0825266085579503, 0.031577021187786734, 0.9715600435251419, -0.6277695036694726, 1.4624183087459612, 0.3347413026191996, -0.1152532437448153, -1.1865453556404562, 0.2847657112374862, 1.141602220461579, 1.8719492651714293, 0.44070196970462516, 0.5808739150553666, 0.07547122924790486, 0.375901295326235, 0.07023151198456123, 0.157693820508083, -0.6006915221829369, -0.6822602400286731, -1.7157126408455547, 0.49483670011639275, 0.4577266871396805, 1.436831925805701, 0.7904203873220813, -0.7590251737905108, -1.7290141836361141, -0.4020586820495772, 1.5535862098972446, 3.6037840278824054, 0.21137061391906256, 0.9931291699028821, 0.7822952941217145, 0.18026065394316798, 0.5941467993427239, -1.621326191931974, 0.4763953522972379, -1.1770062674333455, -0.7123488941993397, 0.6989887650910924, 1.2638410865109648, 1.1000420937623292, 1.7270646929519513, 0.15726613189907818, -0.01727410324846941, 1.0290560217689273, -0.8709836262810384, 2.7845860533356572, 0.3641158203015265, 0.13226532809036168, 0.2951763016524554, 0.7743153945420816, 0.4214203528753148, -0.13648666257306918, 1.4353724461329946, 0.05712409824976222, 1.8739429320808898, 0.3875100228833696, 0.6133967013769163, -0.06360382089798235, 1.7182669931412147, -1.9486377657868983, 1.5680838277227225, -1.7291349856338805, 1.4028727662943752, 2.641526335083484, 0.8714310860911468, 0.6460384968137614, 0.9644282195958942, 0.4192547537429095, 0.5336951878025346, -1.6155931220541013, 1.382038304059018, -1.0308338326622324, 0.3100681551891527, -0.2248061398232518, 1.1236377212369533, 0.5505458988200185, -1.4443612921126205, 1.5491431786315544, 1.0926281116171135, 0.9109728408887259, 0.07559179885167992, 0.07481425166380193, 0.9936940677299471, 0.05487913221156311, 0.6569683857207108, 0.2395619485462091, 0.3836472684567937, -0.06128603710860422, 1.8641116912884843, -0.4625626541960177, 1.2566653303176594, -1.3586407876871787, -0.2649901415348109, 0.4117658779941245, 1.0487986824704914, -0.2084340306707616, -0.6266481560256933, 1.692338765583837, -1.6977956246610975, 2.536746104085756, 0.3252042427236669, 0.5432212169565354, 0.13158472913648686, 0.7135550234439235, 0.26315929236340685, -0.5500834546160845, 0.7032655622143559, 0.43381115353100524, -1.6289962539774976, -0.4247105556650657, -0.4731705500117726, -1.5362032881052554, -0.9279916452069945, 1.0059841494364141, -0.9956206914634382, 0.06667735637784473, -1.4530897803150726, 1.8299146083540707, 0.6689445219135484, 0.19853050097451969, 0.20145357593459598, 0.6491310071402193, 0.48893001368117983, -1.9716890940113343, -1.2694818310157856, -1.7402322801697072, -0.08423990815951471, -0.7042297542649187, 0.27804951089445334, 1.6054940725497953, -0.9926626219649288, 0.48898842883039495, -0.03546577044315561, 0.26653539238116075, 1.2680842346650636, 3.709365113825549, 0.6117565249471083, 0.01514140156832198, 0.06912239813757663, 0.10451622496659678, 0.10958574378797192, -0.9930538711749316, -1.8329634208396497, 0.3964518938612651, 1.9264838534760258, 0.45891892449121374, -0.3387001538032654, -1.8108631648791291, 0.011148683729529419, 1.5819320091190334, 0.18782023841811155, 0.659368385289749, -1.294742300193366, 1.0195555264253853, 0.5930378454753868, 0.02545230377720317, 0.520204918246107, 0.8802351157389513, 0.6156828486209666, -1.0579599912980207, -0.612551458344724, -0.725709719978711, -0.1999378112007988, 0.1808654585587157, -0.10056790886072894, 1.4232878308376182, -1.0875247686258183, 1.4361805630288482, 0.11343256404175871, 0.15394074345542827, -1.1082062666722083, 1.7055803129948857, 0.08467414389498545, 0.5719287306245464, 0.07576777714970455, 0.5357654286383574, 0.20606931969869247, -0.3117875909110901, 1.0454704430585096, -1.9079143733447432, 1.4693675489191649, 1.2247887848914552, 1.3448185068994427, -1.2248994203187449, -0.8070079999307801, -1.8459348918909357, -1.1690790657220531, -0.48543524702876656, -1.2058405686488045, 2.90583699168821, 0.3691018692656354, 0.14517488089592248, 0.41493647857085547, 0.8529116120059081, 0.5498125960833066, -0.011865126252810089, -0.570981208233728, 1.7970144397658359, 0.7688050622398555, -1.3849125484108795, -0.2844946479464787, 1.6779399572073392, -0.04961905971548584, 1.5130291827294329, 0.12941047116019322, -1.7117095895765748, 0.039812739160553653, 2.6709814262784675, 0.6522478197696159, 0.32710702180282863, 0.9989470585604714, 0.7707469855595234, 0.3984787917845016, -0.7142845408315311, 0.5619789200709693, 1.152426890740025, -1.9430879433274764, 1.311965047635059, -0.7165061364663512, 1.837437740135858, 0.5133452347814056, -0.33641906569046476, 1.3257111599029698, 1.791543898684783, -1.3180983349157938, 2.04359467707774, 0.07595585938040995, 0.8971878451524213, 0.6448830237753562, 0.9833665604986299, 0.986156097447096, -0.9637332678871847, -0.9665698413061912, -1.4210128496654844, -1.75416889611884, -1.3360361285621885, 1.459414230219454, 1.4829773883355861, 1.5485324111985315, -0.7070527516796891, 0.4034342887149766, 0.606615142437476, 1.0951892167577157, 2.9659532069065273, 0.03476942405577145, 0.6260567762413062, 0.30139690283554654, 0.8096511412071615, 0.9223663912969203, -0.428324893108835, -0.4190901052664482, -0.6299651284637431, -0.3473526036904162, -0.7299317877078118, 1.7323309725693097, -1.0283721868825648, 0.137548579802373, 0.6154174792127185, 1.5681587221592161, 0.04105455501508846, 1.6700165866476875, 3.4268658775389675, 0.3440180478891936, 0.6566076560517079, 0.21540533046542928, 0.24800953159678787, 0.4800727576214885, -1.6166915978011085, 0.6019509918989022, 1.2897114102183305, -0.8267270565661642, 1.8588440047634978, -0.052741787816205976, -1.2482911988613126, 1.9730821785530017, -1.6283801006826912, -0.6900165438553773, 0.4339577619815584, 0.14878923045398978, 3.4127462384872396, 0.5466480595010512, 0.708497728813108, 0.7701239781467909, 0.9083668075526113, 0.2684351846473892, -1.2165953163666345, 0.9950352689447807, 1.876354522216755, -1.0687176055978294, 0.1679305828850915, -0.6501757420962984, -0.7355311425737899, 0.2310980364402327, 0.8966362165735271, 1.4940146107435452, -1.227469590998153, 1.0675536163953738, 1.93760211120067, 0.22930159775165862, 0.33112530546647495, 0.8257876769661313, 0.07069533257356618, 0.16222354096359043, -1.9642923790734528, -0.46269342080249326, 0.36663378080874526, 1.6335944179733268, 1.8802294429674915, -0.8394382613827285, -0.13035958785931478, -1.4651023596760104, -0.2326759501726803, 0.7523263004145906, -1.1262665075456646, 1.1071822091346535, 1.7713583151932804, 0.3131817478931409, 0.8459793350369338, 0.8322103048402291, 0.516163211247275, 0.34490503440577835, -0.931900471813048, -1.7540844465007113, -1.9125600127146896, 1.9511016982037448, -0.3639821550465075, 0.36966594431848554, -1.5538784017503309, 0.04560231208139983, -1.5733215719507736, -0.864326606479694, 1.7459078799810968, -1.7822923362517074, 3.7931831945972507, 0.37007246039372493, 0.6582584918491776, 0.5414609822429136, 0.5452341702770789, 0.16629136823541427, 0.8616677410621705, 0.9409162746032236, -1.9906643226121474, -1.7341765978862704, -0.6422650822553886, -0.22805567478216585, -0.041933244126418925, 1.710623045973662, 0.18415866159565805, 1.2883848091765835, 0.3326492179821754, 0.6365644653467677, 1.9458852647695237, 0.5308169683796962, 0.04301787893165398, 0.7802151965151257, 0.08084082319378741, 0.4100509130115932, 0.866935085898215, -0.9284141352930247, 0.6248662253860068, 1.4971598170368825, 0.8543020305878618, 0.8633368998391077, 1.2963300520095586, -0.5038155311497288, -1.6203691730580294, 0.02689861015545661, 1.5887578634986004, -1.5679301918019632, 0.4542742737952632, 0.8155377505222534, 0.6617319378529791, 0.028037732060795663, 0.06083396635020939, 0.036333471091526105, 1.1318348061791932, -0.157959817278277, -0.8186389852034032, -1.407055133982292, 1.5523140484841864, -1.1922871514635305, -0.5813912043862921, 0.8975336913963556, 0.5433376101615801, 1.610066614092764, -1.2840263582026248, -1.5550201680741604, 1.1874132961099622, 0.6249538745920217, 0.862661764232802, 0.46107695956084027, 0.3217466958737097, 0.770053222428401, 0.12897845770973035, 1.3513446785663283, -0.14725731249762936, -0.6863286892750167, 1.0940553964011295, -1.3181583970330182, 0.7790652844388923, -0.8130295526806912, 0.46663744584329336, 0.6371162727865829, 1.9010219119241463, -0.26735212231063277, 0.828635794075638, 0.6450099545533785, 0.8128272938800425, 0.01743300364070168, 0.7879046575778758, 0.8756835242227461, -1.553444649274054, 1.5952891572955743, 0.9258334577017779, 0.6440092374888227, -0.9210358416808256, -0.053401247673314056, -1.4607065110163018, -0.2870404668022637, -0.21464040139468474, 1.7667051859730223, -0.1353095899291801, -1.215033501705994])
    runGait([0.18913739859461356, 245.76395081686002, 0.17892491628438786, 3.18374003551514, 0.808366728912364, 0.03958526452613142, 0.42318206278409015, 0.7311598007949505, 0.6166438335549862, 0.32402160814594994, 0.13335847770199669, 0.0825266085579503, 0.031577021187786734, 0.9715600435251419, -0.6277695036694726, 1.4624183087459612, 0.3347413026191996, -0.1152532437448153, -1.1865453556404562, 0.2847657112374862, 1.141602220461579, 1.8719492651714293, 0.44070196970462516, 0.5808739150553666, 0.07547122924790486, 0.375901295326235, 0.07023151198456123, 0.157693820508083, -0.6006915221829369, -0.6822602400286731, -1.7157126408455547, 0.49483670011639275, 0.4577266871396805, 1.436831925805701, 0.7904203873220813, -0.7590251737905108, -1.7290141836361141, -0.4020586820495772, 1.5535862098972446, 3.6037840278824054, 0.21137061391906256, 0.9931291699028821, 0.7822952941217145, 0.18026065394316798, 0.5941467993427239, -1.621326191931974, 0.4763953522972379, -1.1770062674333455, -0.7123488941993397, 0.6989887650910924, 1.2638410865109648, 1.1000420937623292, 1.7270646929519513, 0.15726613189907818, -0.01727410324846941, 1.0290560217689273, -0.8709836262810384, 2.7845860533356572, 0.3641158203015265, 0.13226532809036168, 0.2951763016524554, 0.7743153945420816, 0.4214203528753148, -0.13648666257306918, 1.4353724461329946, 0.05712409824976222, 1.8739429320808898, 0.3875100228833696, 0.6133967013769163, -0.06360382089798235, 1.7182669931412147, -1.9486377657868983, 1.5680838277227225, -1.7291349856338805, 1.4028727662943752, 2.641526335083484, 0.8714310860911468, 0.6460384968137614, 0.9644282195958942, 0.4192547537429095, 0.5336951878025346, -1.6155931220541013, 1.382038304059018, -1.0308338326622324, 0.3100681551891527, -0.2248061398232518, 1.1236377212369533, 0.5505458988200185, -1.4443612921126205, 1.5491431786315544, 1.0926281116171135, 0.9109728408887259, 0.07559179885167992, 0.07481425166380193, 0.9936940677299471, 0.05487913221156311, 0.6569683857207108, 0.2395619485462091, 0.3836472684567937, -0.06128603710860422, 1.8641116912884843, -0.4625626541960177, 1.2566653303176594, -1.3586407876871787, -0.2649901415348109, 0.4117658779941245, 1.0487986824704914, -0.2084340306707616, -0.6266481560256933, 1.692338765583837, -1.6977956246610975, 2.536746104085756, 0.3252042427236669, 0.5432212169565354, 0.13158472913648686, 0.7135550234439235, 0.26315929236340685, -0.5500834546160845, 0.7032655622143559, 0.43381115353100524, -1.6289962539774976, -0.4247105556650657, -0.4731705500117726, -1.5362032881052554, -0.9279916452069945, 1.0059841494364141, -0.9956206914634382, 0.06667735637784473, -1.4530897803150726, 1.8299146083540707, 0.6689445219135484, 0.19853050097451969, 0.20145357593459598, 0.6491310071402193, 0.48893001368117983, -1.9716890940113343, -1.2694818310157856, -1.7402322801697072, -0.08423990815951471, -0.7042297542649187, 0.27804951089445334, 1.6054940725497953, -0.9926626219649288, 0.48898842883039495, -0.03546577044315561, 0.26653539238116075, 1.2680842346650636, 3.709365113825549, 0.6117565249471083, 0.01514140156832198, 0.06912239813757663, 0.10451622496659678, 0.10958574378797192, -0.9930538711749316, -1.8329634208396497, 0.3964518938612651, 1.9264838534760258, 0.45891892449121374, -0.3387001538032654, -1.8108631648791291, 0.011148683729529419, 1.5819320091190334, 0.18782023841811155, 0.659368385289749, -1.294742300193366, 1.0195555264253853, 0.5930378454753868, 0.02545230377720317, 0.520204918246107, 0.8802351157389513, 0.6156828486209666, -1.0579599912980207, -0.612551458344724, -0.725709719978711, -0.1999378112007988, 0.1808654585587157, -0.10056790886072894, 1.4232878308376182, -1.0875247686258183, 1.4361805630288482, 0.11343256404175871, 0.15394074345542827, -1.1082062666722083, 1.7055803129948857, 0.08467414389498545, 0.5719287306245464, 0.07576777714970455, 0.5357654286383574, 0.20606931969869247, -0.3117875909110901, 1.0454704430585096, -1.9079143733447432, 1.4693675489191649, 1.2247887848914552, 1.3448185068994427, -1.2248994203187449, -0.8070079999307801, -1.8459348918909357, -1.1690790657220531, -0.48543524702876656, -1.2058405686488045, 2.90583699168821, 0.3691018692656354, 0.14517488089592248, 0.41493647857085547, 0.8529116120059081, 0.5498125960833066, -0.011865126252810089, -0.570981208233728, 1.7970144397658359, 0.7688050622398555, -1.3849125484108795, -0.2844946479464787, 1.6779399572073392, -0.04961905971548584, 1.5130291827294329, 0.12941047116019322, -1.7117095895765748, 0.039812739160553653, 2.6709814262784675, 0.6522478197696159, 0.32710702180282863, 0.9989470585604714, 0.7707469855595234, 0.3984787917845016, -0.7142845408315311, 0.5619789200709693, 1.152426890740025, -1.9430879433274764, 1.311965047635059, -0.7165061364663512, 1.837437740135858, 0.5133452347814056, -0.33641906569046476, 1.3257111599029698, 1.791543898684783, -1.3180983349157938, 2.04359467707774, 0.07595585938040995, 0.8971878451524213, 0.6448830237753562, 0.9833665604986299, 0.986156097447096, -0.9637332678871847, -0.9665698413061912, -1.4210128496654844, -1.75416889611884, -1.3360361285621885, 1.459414230219454, 1.4829773883355861, 1.5485324111985315, -0.7070527516796891, 0.4034342887149766, 0.606615142437476, 1.0951892167577157, 2.9659532069065273, 0.03476942405577145, 0.6260567762413062, 0.30139690283554654, 0.8096511412071615, 0.9223663912969203, -0.428324893108835, -0.4190901052664482, -0.6299651284637431, -0.3473526036904162, -0.7299317877078118, 1.7323309725693097, -1.0283721868825648, 0.137548579802373, 0.6154174792127185, 1.5681587221592161, 0.04105455501508846, 1.6700165866476875, 3.4268658775389675, 0.3440180478891936, 0.6566076560517079, 0.21540533046542928, 0.24800953159678787, 0.4800727576214885, -1.6166915978011085, 0.6019509918989022, 1.2897114102183305, -0.8267270565661642, 1.8588440047634978, -0.052741787816205976, -1.2482911988613126, 1.9730821785530017, -1.6283801006826912, -0.6900165438553773, 0.4339577619815584, 0.14878923045398978, 3.4127462384872396, 0.5466480595010512, 0.708497728813108, 0.7701239781467909, 0.9083668075526113, 0.2684351846473892, -1.2165953163666345, 0.9950352689447807, 1.876354522216755, -1.0687176055978294, 0.1679305828850915, -0.6501757420962984, -0.7355311425737899, 0.2310980364402327, 0.8966362165735271, 1.4940146107435452, -1.227469590998153, 1.0675536163953738, 1.93760211120067, 0.22930159775165862, 0.33112530546647495, 0.8257876769661313, 0.07069533257356618, 0.16222354096359043, -1.9642923790734528, -0.46269342080249326, 0.36663378080874526, 1.6335944179733268, 1.8802294429674915, -0.8394382613827285, -0.13035958785931478, -1.4651023596760104, -0.2326759501726803, 0.7523263004145906, -1.1262665075456646, 1.1071822091346535, 1.7713583151932804, 0.3131817478931409, 0.8459793350369338, 0.8322103048402291, 0.516163211247275, 0.34490503440577835, -0.931900471813048, -1.7540844465007113, -1.9125600127146896, 1.9511016982037448, -0.3639821550465075, 0.36966594431848554, -1.5538784017503309, 0.04560231208139983, -1.5733215719507736, -0.864326606479694, 1.7459078799810968, -1.7822923362517074, 3.7931831945972507, 0.37007246039372493, 0.6582584918491776, 0.5414609822429136, 0.5452341702770789, 0.16629136823541427, 0.8616677410621705, 0.9409162746032236, -1.9906643226121474, -1.7341765978862704, -0.6422650822553886, -0.22805567478216585, -0.041933244126418925, 1.710623045973662, 0.18415866159565805, 1.2883848091765835, 0.3326492179821754, 0.6365644653467677, 1.9458852647695237, 0.5308169683796962, 0.04301787893165398, 0.7802151965151257, 0.08084082319378741, 0.4100509130115932, 0.866935085898215, -0.9284141352930247, 0.6248662253860068, 1.4971598170368825, 0.8543020305878618, 0.8633368998391077, 1.2963300520095586, -0.5038155311497288, -1.6203691730580294, 0.02689861015545661, 1.5887578634986004, -1.5679301918019632, 0.4542742737952632, 0.8155377505222534, 0.6617319378529791, 0.028037732060795663, 0.06083396635020939, 0.036333471091526105, 1.1318348061791932, -0.157959817278277, -0.8186389852034032, -1.407055133982292, 1.5523140484841864, -1.1922871514635305, -0.5813912043862921, 0.8975336913963556, 0.5433376101615801, 1.610066614092764, -1.2840263582026248, -1.5550201680741604, 1.1874132961099622, 0.6249538745920217, 0.862661764232802, 0.46107695956084027, 0.3217466958737097, 0.770053222428401, 0.12897845770973035, 1.3513446785663283, -0.14725731249762936, -0.6863286892750167, 1.0940553964011295, -1.3181583970330182, 0.7790652844388923, -0.8130295526806912, 0.46663744584329336, 0.6371162727865829, 1.9010219119241463, -0.26735212231063277, 0.828635794075638, 0.6450099545533785, 0.8128272938800425, 0.01743300364070168, 0.7879046575778758, 0.8756835242227461, -1.553444649274054, 1.5952891572955743, 0.9258334577017779, 0.6440092374888227, -0.9210358416808256, -0.053401247673314056, -1.4607065110163018, -0.2870404668022637, -0.21464040139468474, 1.7667051859730223, -0.1353095899291801, -1.215033501705994])


if __name__ == "__main__":
    main()

# ssc32.close()  # close port
# p.disconnect(physicsClient)
